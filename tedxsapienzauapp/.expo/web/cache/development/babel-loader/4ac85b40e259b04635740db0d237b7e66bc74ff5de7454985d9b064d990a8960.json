{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport { useNavigation } from '@react-navigation/native';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar LoadingScreen = function LoadingScreen() {\n  var _useState = useState(true),\n    _useState2 = _slicedToArray(_useState, 2),\n    isLoading = _useState2[0],\n    setIsLoading = _useState2[1];\n  var opacity = new Animated.Value(1);\n  var navigation = useNavigation();\n  useEffect(function () {\n    var fadeOut = function fadeOut() {\n      Animated.timing(opacity, {\n        toValue: 0,\n        duration: 3000,\n        useNativeDriver: false\n      }).start(function () {\n        setIsLoading(false);\n        navigation.navigate('LoadingTransition');\n      });\n    };\n    setTimeout(fadeOut, 3500);\n  }, [opacity, navigation]);\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Animated.Image, {\n      source: require(\"../images/logo-white.png\"),\n      style: [styles.image, {\n        opacity: opacity\n      }]\n    }), isLoading && _jsx(ActivityIndicator, {\n      size: \"large\",\n      color: \"white\"\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'black',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  image: {\n    width: 200,\n    height: 80,\n    resizeMode: 'contain'\n  }\n});\nexport default LoadingScreen;","map":{"version":3,"names":["React","useState","useEffect","View","ActivityIndicator","Image","StyleSheet","Animated","useNavigation","jsx","_jsx","jsxs","_jsxs","LoadingScreen","_useState","_useState2","_slicedToArray","isLoading","setIsLoading","opacity","Value","navigation","fadeOut","timing","toValue","duration","useNativeDriver","start","navigate","setTimeout","style","styles","container","children","source","require","image","size","color","create","flex","backgroundColor","justifyContent","alignItems","width","height","resizeMode"],"sources":["C:/Users/wangf/Myrepos/tedxsapienzauapp/tedxsapienzauapp/src/components/pages/LoadingScreen.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { View, ActivityIndicator, Image, StyleSheet, Animated } from 'react-native';\r\nimport { useNavigation } from '@react-navigation/native';\r\n\r\nconst LoadingScreen = () => {\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const opacity = new Animated.Value(1); // Initialize opacity value to 1 for initial visibility\r\n  const navigation = useNavigation();\r\n\r\n  useEffect(() => {\r\n    const fadeOut = () => {\r\n      Animated.timing(opacity, {\r\n        toValue: 0,\r\n        duration: 3000, // Adjust the duration as needed\r\n        useNativeDriver: false,\r\n      }).start(() => {\r\n        setIsLoading(false);\r\n        // Navigate to 'LoadingTransition' screen after fade-out\r\n        navigation.navigate('LoadingTransition');\r\n      });\r\n    };\r\n  \r\n    // Start fading out after a delay (e.g., 3500 milliseconds to ensure animation completion)\r\n    setTimeout(fadeOut, 3500); \r\n  }, [opacity, navigation]);\r\n  \r\n  return (\r\n    <View style={styles.container}>\r\n      <Animated.Image\r\n        source={require('../images/logo-white.png')}\r\n        style={[styles.image, { opacity }]}\r\n      />\r\n      {isLoading && <ActivityIndicator size=\"large\" color=\"white\" />}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: 'black',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  image: {\r\n    width: 200, // Adjust the width and height as needed\r\n    height: 80,\r\n    resizeMode: 'contain', // Adjust the resizeMode as needed\r\n  },\r\n});\r\n\r\nexport default LoadingScreen;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,OAAAC,IAAA;AAAA,OAAAC,iBAAA;AAAA,OAAAC,KAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,QAAA;AAEnD,SAASC,aAAa,QAAQ,0BAA0B;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAEzD,IAAMC,aAAa,GAAG,SAAhBA,aAAaA,CAAA,EAAS;EAC1B,IAAAC,SAAA,GAAkCb,QAAQ,CAAC,IAAI,CAAC;IAAAc,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAzCG,SAAS,GAAAF,UAAA;IAAEG,YAAY,GAAAH,UAAA;EAC9B,IAAMI,OAAO,GAAG,IAAIZ,QAAQ,CAACa,KAAK,CAAC,CAAC,CAAC;EACrC,IAAMC,UAAU,GAAGb,aAAa,CAAC,CAAC;EAElCN,SAAS,CAAC,YAAM;IACd,IAAMoB,OAAO,GAAG,SAAVA,OAAOA,CAAA,EAAS;MACpBf,QAAQ,CAACgB,MAAM,CAACJ,OAAO,EAAE;QACvBK,OAAO,EAAE,CAAC;QACVC,QAAQ,EAAE,IAAI;QACdC,eAAe,EAAE;MACnB,CAAC,CAAC,CAACC,KAAK,CAAC,YAAM;QACbT,YAAY,CAAC,KAAK,CAAC;QAEnBG,UAAU,CAACO,QAAQ,CAAC,mBAAmB,CAAC;MAC1C,CAAC,CAAC;IACJ,CAAC;IAGDC,UAAU,CAACP,OAAO,EAAE,IAAI,CAAC;EAC3B,CAAC,EAAE,CAACH,OAAO,EAAEE,UAAU,CAAC,CAAC;EAEzB,OACET,KAAA,CAACT,IAAI;IAAC2B,KAAK,EAAEC,MAAM,CAACC,SAAU;IAAAC,QAAA,GAC5BvB,IAAA,CAACH,QAAQ,CAACF,KAAK;MACb6B,MAAM,EAAEC,OAAO,2BAA2B,CAAE;MAC5CL,KAAK,EAAE,CAACC,MAAM,CAACK,KAAK,EAAE;QAAEjB,OAAO,EAAPA;MAAQ,CAAC;IAAE,CACpC,CAAC,EACDF,SAAS,IAAIP,IAAA,CAACN,iBAAiB;MAACiC,IAAI,EAAC,OAAO;MAACC,KAAK,EAAC;IAAO,CAAE,CAAC;EAAA,CAC1D,CAAC;AAEX,CAAC;AAED,IAAMP,MAAM,GAAGzB,UAAU,CAACiC,MAAM,CAAC;EAC/BP,SAAS,EAAE;IACTQ,IAAI,EAAE,CAAC;IACPC,eAAe,EAAE,OAAO;IACxBC,cAAc,EAAE,QAAQ;IACxBC,UAAU,EAAE;EACd,CAAC;EACDP,KAAK,EAAE;IACLQ,KAAK,EAAE,GAAG;IACVC,MAAM,EAAE,EAAE;IACVC,UAAU,EAAE;EACd;AACF,CAAC,CAAC;AAEF,eAAejC,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}